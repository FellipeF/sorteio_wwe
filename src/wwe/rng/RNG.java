package wwe.rng;

import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List; //Usa isso ao invés de .awt para assegurar que Lista pegue parâmetros.
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Fellipe Freire
 *
 */
public class RNG extends javax.swing.JFrame {

    /**
     * Creates new form RNG
     */
    public RNG() {
        
        this.lutadores_RAW = new String[]{"Batista", "CM Punk", "Hardcore Holly",
            "Kofi Kingston", "Lance Cade", "Paul London", "Randy Orton",
            "Rey Mysterio", "Santino Marella", 
            "The Great Khali", "Trevor Murdoch"};
        
        this.divas_RAW = new String[]{"Candice Michelle", "Kelly Kelly", 
            "Mickie James", "Beth Phoenix"};
        
        this.tag_teams_RAW = new String[]{"Holly & Rhodes", "Cade & Murdoch", 
            "Evolution"};
        
        this.lutadores_ECW = new String[]{"Big Daddy V", "Big Show", 
            "Chavo Guerrero", "Chris Jericho", "Festus", "Finlay", "JBL", 
            "Jesse", "John Cena", "John Morrison", "Mark Henry", "Mr.Kennedy", 
            "MVP", "The Miz", "Tommy Dreamer", "Umaga"};
        
        this.divas_ECW = new String[]{"Maria", "Melina", "Michele McCool"};
        
        this.tag_teams_ECW = new String[]{"JBL & Chris Jericho", 
            "Jesse & Festus", "Miz & Morrison", "Evolution"};
        
        this.lutadores_SMACKDOWN = new String[]{"Brian Kendrick", "Carlito", 
            "Chuck Palumbo", "Edge", "Elijah Burke", "Jeff Hardy", 
            "Jimmy Wang Yang", "JTG", "Kane", "Matt Hardy", "Shad", 
            "Shawn Michaels", "Shelton Benjamin", "Triple H", "Undertaker", 
            "William Regal"};
        
        this.divas_SMACKDOWN = new String[]{"Ashley", "Jillian", "Layla", 
            "Victoria"};
        
        this.tag_teams_SMACKDOWN = new String[]{"The Hardys", 
            "Brothers of Destruction", "Cryme Tyme", "Evolution"};
        
        this.one_on_one = new String[] {"Normal Match", "Inferno Match",
                "First Blood", "Falls Count Anywhere", "Hell in a Cell", "Ironman",
                "Ladder", "Last Man Standing", "Normal Submission", "Table", "TLC",
                "Steel Cage", "Backstage", "ECW Extreme Rules Match"};
        
        this.triple_threat = new String[]{"Normal", "Falls Count Anywhere", 
            "Hell in a Cell", "Ladder", "Steel Cage", "Table", "TLC", 
            "ECW Extreme Rules Match"};
        
        this.fatal_4_way = new String[]{"Normal", "Falls Count Anywhere", 
            "Battle Royal", "Hell in a Cell", "Ladder", "Steel Cage", "Table", 
            "TLC", "ECW Extreme Rules Match"};
        
        this.handicap = new String[] {"Gauntlet", "One on Two", "One on Tag", 
            "One on Three", "One on Trio", "Tag on Trio"};
        
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnClick1 = new javax.swing.JButton();
        btnClick2 = new javax.swing.JButton();
        btnClick3 = new javax.swing.JButton();
        lblMensagem2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        btnClick4 = new javax.swing.JButton();
        btnClick5 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        lblMensagem = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnClick1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Fellipe\\Documents\\NetBeansProjects\\RNG\\Raw.jpg")); // NOI18N
        btnClick1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClick1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnClick1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 200, 200));

        btnClick2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Fellipe\\Documents\\NetBeansProjects\\RNG\\ECW Logo.jpg")); // NOI18N
        btnClick2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClick2ActionPerformed(evt);
            }
        });
        getContentPane().add(btnClick2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 180, 200, 200));

        btnClick3.setIcon(new javax.swing.ImageIcon("C:\\Users\\Fellipe\\Documents\\NetBeansProjects\\RNG\\SmackDown.jpg")); // NOI18N
        btnClick3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClick3ActionPerformed(evt);
            }
        });
        getContentPane().add(btnClick3, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 180, 200, 200));

        lblMensagem2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblMensagem2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMensagem2.setText("SUPERSTAR");
        lblMensagem2.setToolTipText("");
        lblMensagem2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(lblMensagem2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 390, 220, 65));

        jCheckBox1.setText("Divas");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 470, -1, -1));

        jCheckBox2.setText("Tag Team");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 470, -1, -1));

        btnClick4.setText("Sortear Brands");
        btnClick4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClick4ActionPerformed(evt);
            }
        });
        getContentPane().add(btnClick4, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 450, -1, -1));

        btnClick5.setText("Abrir Planilha");
        btnClick5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClick5ActionPerformed(evt);
            }
        });
        getContentPane().add(btnClick5, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 410, 105, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Fellipe\\Documents\\NetBeansProjects\\RNG\\WWE Logo.PNG")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 160));

        lblMensagem.setFont(new java.awt.Font("Vrinda", 1, 24)); // NOI18N
        lblMensagem.setText("                                         Choose your Brand");
        getContentPane().add(lblMensagem, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 633, 125));

        jButton1.setText("Resetar Sorteios");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 500, 150, -1));

        jButton2.setText("Sortear Lutas");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 450, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
     
    //Global variables:
    //Begin
    
    boolean diva_bool, tag_bool;
    int contador = 0;
    
    //As seguintes variáveis são inicializadas no construtor
    
    String lutadores_RAW[];
    String divas_RAW[];
    String tag_teams_RAW[];
    
    String lutadores_ECW[];
    String divas_ECW[];
    String tag_teams_ECW[];
    
    String lutadores_SMACKDOWN[];
    String divas_SMACKDOWN[];
    String tag_teams_SMACKDOWN[];
    
    //Lutas
    
    String one_on_one[];
    String two_on_two[];
    String triple_threat[];
    String fatal_4_way[];
    String six_man[];   //Money in the Bank entra?
    String handicap[];
     
     //END
    
    public void GerarFoto(String nome)
    {
        
        lblMensagem2.setText(nome);
        JFrame frame = new JFrame();
        ImageIcon icon = new ImageIcon(nome + ".jpg");
        JLabel label = new JLabel(icon);
        frame.add(label);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        
    }
    
    public void SorteioEvolution()
    {
        String[] evolution = {"Batista", "Randy Orton", "Ric Flair", "Triple H"};
        String evolution_sorteio = evolution[new Random().nextInt(evolution.length)];   //Sorteio em cima de todos.
        GerarFoto(evolution_sorteio);
        
        List<String> list = new ArrayList<>(Arrays.asList(evolution));    //Copia o array para uma lista
        list.remove(evolution_sorteio);
        
        evolution = list.toArray(new String[0]);                                //Copia a lista com elemento removido para mesmo array.
        evolution_sorteio = evolution[new Random().nextInt(evolution.length)];  //Sorteio em cima de todos que não saíram.
        GerarFoto(evolution_sorteio);
        
        lblMensagem2.setText("Evolution");
    }
    
    //ECW
    
    private void btnClick2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClick2ActionPerformed
    
        try{
            if ((diva_bool == false) && (tag_bool == false))
            {
                String lutador = lutadores_ECW[new Random().nextInt(lutadores_ECW.length)];
                GerarFoto(lutador);
            
                List<String> list = new ArrayList<>(Arrays.asList(lutadores_ECW));
                list.remove(lutador);
            
                lutadores_ECW = list.toArray(new String[0]);
            
            }
            else if ((diva_bool == true) && (tag_bool == false))
            {
                String diva = divas_ECW[new Random().nextInt(divas_ECW.length)];
                GerarFoto(diva);
            
                List<String> list = new ArrayList<>(Arrays.asList(divas_ECW));
                list.remove(diva);
            
                divas_ECW = list.toArray(new String[0]);
            }
            else
            {
                String tag_team = tag_teams_ECW[new Random().nextInt(tag_teams_ECW.length)];
            
                if(tag_team.equals("Evolution")){
                    SorteioEvolution();
                }
                else
                {
                    GerarFoto(tag_team);
                }
            
                List<String> list = new ArrayList<>(Arrays.asList(tag_teams_ECW));
                list.remove(tag_team);
            
                tag_teams_ECW = list.toArray(new String[0]);
            }
        }
        catch (Exception e)
        {
            lblMensagem2.setText("<html> <strong> Não há mais sorteios únicos "
                    + "disponíveis nessa categoria! </strong> </html>");
        }
    }//GEN-LAST:event_btnClick2ActionPerformed

//RAW
    
    private void btnClick1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClick1ActionPerformed
        try {
            if ((diva_bool == false) && (tag_bool == false))
                {
                    String lutador = lutadores_RAW[new Random().nextInt(lutadores_RAW.length)];
                    GerarFoto(lutador);
            
                    List<String> list = new ArrayList<>(Arrays.asList(lutadores_RAW));
                    list.remove(lutador);
            
                    lutadores_RAW = list.toArray(new String[0]);
                }
                else if ((diva_bool == true) && (tag_bool == false))
                {
            
                    String diva = divas_RAW[new Random().nextInt(divas_RAW.length)];
                    GerarFoto(diva);
            
                    List<String> list = new ArrayList<>(Arrays.asList(divas_RAW));
                    list.remove(diva);
            
                    divas_RAW = list.toArray(new String[0]);
                }
                else
                {
                    String tag_team = tag_teams_RAW[new Random().nextInt(tag_teams_RAW.length)];
            
                    if(tag_team.equals("Evolution")){
                        SorteioEvolution();
                    }
                    else
                    {
                        GerarFoto(tag_team);
                    }
                    List<String> list = new ArrayList<>(Arrays.asList(tag_teams_RAW));
                    list.remove(tag_team);
            
                    tag_teams_RAW = list.toArray(new String[0]);
                }  
            } 
        catch (Exception e) 
        {
            lblMensagem2.setText("<html> <strong> Não há mais sorteios únicos "
                    + "disponíveis nessa categoria! </strong> </html>");
        }
          
    }//GEN-LAST:event_btnClick1ActionPerformed

    //SMACKDOWN
    
    private void btnClick3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClick3ActionPerformed
        
    try{
       if ((diva_bool == false) && (tag_bool == false))
        {
            String lutador = lutadores_SMACKDOWN[new Random().nextInt(lutadores_SMACKDOWN.length)];
            GerarFoto(lutador);
            
            List<String> list = new ArrayList<>(Arrays.asList(lutadores_SMACKDOWN));
            list.remove(lutador);
            
            lutadores_SMACKDOWN = list.toArray(new String[0]);
        }
        else if ((diva_bool == true) && (tag_bool == false))
        {
            String diva = divas_SMACKDOWN[new Random().nextInt(divas_SMACKDOWN.length)];
            GerarFoto(diva);
            
            List<String> list = new ArrayList<>(Arrays.asList(divas_SMACKDOWN));
            list.remove(diva);
            
            divas_SMACKDOWN = list.toArray(new String[0]);
        }
        else
        {
            String tag_team = tag_teams_SMACKDOWN[new Random().nextInt(tag_teams_SMACKDOWN.length)];
            
            if(tag_team.equals("Evolution")){
                SorteioEvolution();
            }
            else
            {
                GerarFoto(tag_team);
            }
            
            List<String> list = new ArrayList<>(Arrays.asList(tag_teams_SMACKDOWN));
            list.remove(tag_team);
            
            tag_teams_SMACKDOWN = list.toArray(new String[0]);
        } 
    }    
    catch (Exception e)
    {
        lblMensagem2.setText("<html> <strong> Não há mais sorteios únicos "
                + "disponíveis nessa categoria! </strong> </html>");
    }
    }//GEN-LAST:event_btnClick3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        diva_bool = true;
        lblMensagem2.setText("DIVA");
        contador++;
        if (contador > 1)
        {
            contador = 0;
            diva_bool = false;
            lblMensagem2.setText("SUPERSTAR");
       }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        tag_bool = true;
        lblMensagem2.setText("TAG TEAMS");
        contador++;
        if (contador > 1)
        {
            contador = 0;
            tag_bool = false;
            lblMensagem2.setText("SUPERSTAR");
       }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    /*Sorteio de brands para PPV ou Campeonatos.
    
        *Rever se o sorteio se faz removendo a brand que já foi sorteada ou não.
    
    */
    
    private void btnClick4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClick4ActionPerformed
       String brands[] = {"RAW", "ECW", "SMACKDOWN"};
       String brand = brands[new Random().nextInt(brands.length)];
       GerarFoto(brand);
    }//GEN-LAST:event_btnClick4ActionPerformed

    private void btnClick5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClick5ActionPerformed
        try {
            Desktop.getDesktop().open(new File("C:\\Users\\Fellipe\\Desktop\\WWE.xlsx"));
        } catch (IOException e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnClick5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.lutadores_RAW = new String[]{"Batista", "CM Punk", "Hardcore Holly",
            "Kofi Kingston", "Lance Cade", "Paul London", "Randy Orton",
            "Rey Mysterio", "Santino Marella", 
            "The Great Khali", "Trevor Murdoch"};
        
        this.divas_RAW = new String[]{"Candice Michelle", "Kelly Kelly", 
            "Mickie James", "Beth Phoenix"};
        
        this.tag_teams_RAW = new String[]{"Holly & Rhodes", "Cade & Murdoch", 
            "Evolution"};
        
        this.lutadores_ECW = new String[]{"Big Daddy V", "Big Show", 
            "Chavo Guerrero", "Chris Jericho", "Festus", "Finlay", "JBL", 
            "Jesse", "John Cena", "John Morrison", "Mark Henry", "Mr.Kennedy", 
            "MVP", "The Miz", "Tommy Dreamer", "Umaga"};
        
        this.divas_ECW = new String[]{"Maria", "Melina", "Michele McCool"};
        
        this.tag_teams_ECW = new String[]{"JBL & Chris Jericho", 
            "Jesse & Festus", "Miz & Morrison", "Evolution"};
        
        this.lutadores_SMACKDOWN = new String[]{"Brian Kendrick", "Carlito", 
            "Chuck Palumbo", "Edge", "Elijah Burke", "Jeff Hardy", 
            "Jimmy Wang Yang", "JTG", "Kane", "Matt Hardy", "Shad", 
            "Shawn Michaels", "Shelton Benjamin", "Triple H", "Undertaker", 
            "William Regal"};
        
        this.divas_SMACKDOWN = new String[]{"Ashley", "Jillian", "Layla", 
            "Victoria"};
        
        this.tag_teams_SMACKDOWN = new String[]{"The Hardys", 
            "Brothers of Destruction", "Cryme Tyme", "Evolution"};
    }//GEN-LAST:event_jButton1ActionPerformed

    // Ver se esse sorteio pode sortear lutas iguais.
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int n;
        int t;
        int controle = 0;
        
        n = Integer.parseInt(JOptionPane.showInputDialog(null, 
                "<html> Informe um tipo de luta:  <br> 1 - One on One <br>"
                        + "2 - Tag Team <br> 3 - Triple Threat"
                        + "<br> 4 - Fatal Four-Way <br> 5 - Handicap"
                        + "<br> 6 - Six-Man <br> 0 - Sair </html>"));
        
        if (n == 1)
        {
            do
            {
              String match = one_on_one[new Random().nextInt(one_on_one.length)];
            controle = Integer.parseInt(JOptionPane.showInputDialog(rootPane, 
                    "<html>" + match + "<br><br> <em> Digite 1 para continuar "
                            + "sorteando</em>", "One on One", 
                    JOptionPane.INFORMATION_MESSAGE));  
            
            } while (controle == 1);
        }
        if (n == 2) //Normal Tag pode ser Normal ou Elimination sem Tornado.
        {
            t = Integer.parseInt(JOptionPane.showInputDialog("<html> Opções: "
                    + "<br> 1 - Normal Tag <br>"
                    + "2 - Tornado Tag </html>"));
            
            
            if (t == 1)
            {
                two_on_two = new String[]{"Tag Team", "Elimination Normal Tag"};
            }
            if (t == 2)
            {
                two_on_two = new String[]{"Tornado Tag", 
                    "Falls Count Anywhere Tornado Tag", 
                    "Hell in a Cell Tornado Tag", "Ladder Tornado Tag", 
                    "Steel Cage Tornado Tag", "Table Tornado Tag", 
                    "TLC Tornado Tag", "Elimination Tornado Tag", 
                    "Elimination Table Tornado Tag", "ECW Extreme Tornado Tag"};
            }
            
            do
            {
                String match = two_on_two[new Random().nextInt(two_on_two.length)];
                controle = Integer.parseInt(JOptionPane.showInputDialog(
                        rootPane, "<html>" + match + "<br><br> <em> Digite 1 "
                                + "para continuar sorteando</em>", 
                        "Two on Two", JOptionPane.INFORMATION_MESSAGE));  
            } while (controle == 1);
        }
        
        if (n == 3)
        {
            do
            {
                String match = triple_threat[new Random().nextInt(triple_threat.length)];
                controle = Integer.parseInt(JOptionPane.showInputDialog(rootPane,
                        "<html>" + match + "<br><br> <em> Digite 1 para "
                                + "continuar sorteando</em>", "Triple Threat", 
                                JOptionPane.INFORMATION_MESSAGE));  
            } while (controle == 1);
        }
        
        if (n == 4)
        {
            do
            {
                String match = fatal_4_way[new Random().nextInt(fatal_4_way.length)];
                controle = Integer.parseInt(JOptionPane.showInputDialog(rootPane,
                        "<html>" + match + "<br><br> <em> Digite 1 para "
                                + "continuar sorteando</em>", "Fatal 4-Way", 
                                JOptionPane.INFORMATION_MESSAGE));
            } while (controle == 1);
        }
        
        if (n == 5)
        {
            do
            {
                String match = handicap[new Random().nextInt(handicap.length)];
                controle = Integer.parseInt(JOptionPane.showInputDialog(rootPane,
                        "<html>" + match + "<br><br> <em> Digite 1 para "
                                + "continuar sorteando</em>", "Handicap", 
                                JOptionPane.INFORMATION_MESSAGE));
            } while (controle == 1);
        }
        
        if (n == 6)
        {
            t = Integer.parseInt(JOptionPane.showInputDialog("<html> Opções: "
                    + "<br> 1 - Versus <br>"
                    + "2 - Tag </html>"));
            
            
            if (t == 1)
            {
                six_man = new String[]{"Battle Royal", "Elimination Chamber",
                        "Armageddon Hell in a Cell", "Money in the Bank"};
            }
            if (t == 2)
            {
                six_man = new String[]{"Normal Tag", "Elimination Tag"};
            }
            
            do
            {
                String match = six_man[new Random().nextInt(six_man.length)];
                controle = Integer.parseInt(JOptionPane.showInputDialog(
                        rootPane, "<html>" + match + "<br><br> <em> Digite 1 "
                                + "para continuar sorteando</em>", 
                        "Six-Man", JOptionPane.INFORMATION_MESSAGE));  
            } while (controle == 1);
        }
        
        if(controle != 1)
        {
            JOptionPane.showMessageDialog(rootPane, "Sorteio encerrado");
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RNG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RNG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RNG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RNG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RNG().setVisible(true);
            }
        });
        File file = new File ("/Users/Desktop/A.txt");
        
        Desktop desktop = Desktop.getDesktop();
        if (file.exists())
        {
            desktop.open(file);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClick1;
    private javax.swing.JButton btnClick2;
    private javax.swing.JButton btnClick3;
    private javax.swing.JButton btnClick4;
    private javax.swing.JToggleButton btnClick5;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblMensagem;
    private javax.swing.JLabel lblMensagem2;
    // End of variables declaration//GEN-END:variables
}
